name: Auto-Merge Labeled PRs with Date Check

on:
  workflow_dispatch: # Allows manual trigger
  schedule:
    # Runs daily at 10:58 AM UTC (adjust for your timezone, cron is UTC)
    - cron: "58 10 * * *" 

# Minimum permissions required for this workflow
permissions: 
  pull-requests: write 
  contents: write      
  repository-projects: read 

jobs:
  find_and_merge_prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh config set prompt-enabled false

      - name: Get current date for comparison
        id: get_date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Find and Process PRs with "pending" label
        run: |
          PR_NUMBERS=$(gh pr list --label "pending" --state "open" --json number,title,isDraft -q '.[] | select(.isDraft == false) | .number')
          
          if [ -z "$PR_NUMBERS" ]; then
            echo "No non-draft PRs with 'pending' label found. Exiting."
            exit 0
          fi

          echo "Found PRs with 'pending' label: $PR_NUMBERS"

          MERGED_PRS=()

          for pr_number in $PR_NUMBERS; do
              echo "--- Checking PR #$pr_number ---"

              INDEX_FILES_CHANGED=$(gh pr view "$pr_number" --json files -q '.files[].path' | grep -E '^content/.*/index(\.[a-zA-Z]+)?\.md$' || true)
              
              if [ -z "$INDEX_FILES_CHANGED" ]; then
                echo "PR #$pr_number does not modify any content/index.md file. Skipping."
                continue
              fi

              echo "PR #$pr_number modifies the following content/index.md files:"
              echo "$INDEX_FILES_CHANGED"

              PR_READY_TO_MERGE="false"

              for file in $INDEX_FILES_CHANGED; do
                echo "  - Checking file: $file"
                BRANCH_NAME=$(gh pr view "$pr_number" --json headRefName -q .headRefName)
                
                if [ -z "$BRANCH_NAME" ]; then
                  echo "    - Could not determine head branch name for PR #$pr_number. Skipping file."
                  continue
                fi

                API_URL="repos/$GITHUB_REPOSITORY/contents/$file?ref=$BRANCH_NAME"
                FILE_CONTENT_RAW=$(gh api "$API_URL" --jq '.content' || true)
                
                if [ -z "$FILE_CONTENT_RAW" ]; then
                    echo "    - ERROR: Failed to fetch content for $file from branch '$BRANCH_NAME'. This likely means the branch does not exist or the file is not on that branch."
                    continue
                fi

                FILE_CONTENT=$(echo "$FILE_CONTENT_RAW" | base64 --decode || true)

                YAML_DATE=$(echo "$FILE_CONTENT" | sed -n '/^---$/,/^---$/p' | grep -E '^date:' | head -1 | awk '{print $2}' | sed -e "s/'//g" -e "s/\"//g" -e "s/\\[//g" -e "s/\\]//g" -e "s/,//g")

                if [ -z "$YAML_DATE" ]; then
                    echo "    - No 'date:' found in front matter of $file or unable to parse. Skipping date check for this file."
                    continue
                fi

                echo "    - Date in $file: '$YAML_DATE'"
                echo "    - Current date: '$CURRENT_DATE'"

                if [ "$YAML_DATE" == "$CURRENT_DATE" ]; then
                  echo "    - Date matches today's date. This PR is a candidate for merge."
                  PR_READY_TO_MERGE="true"
                  break
                else
                  echo "    - Date in $file ('$YAML_DATE') does not match today's date ('$CURRENT_DATE')."
                fi
              done

              if [ "$PR_READY_TO_MERGE" == "true" ]; then
                  echo "Attempting to merge PR #$pr_number..."
                  MERGE_OUTPUT=$(gh pr merge "$pr_number" --squash --delete-branch 2>&1)
                  MERGE_STATUS=$?

                  if [ $MERGE_STATUS -eq 0 ]; then
                    echo "Successfully merged PR #$pr_number."
                    MERGED_PRS+=("$pr_number")
                  else
                    echo "Failed to merge PR #$pr_number. Error details:"
                    echo "$MERGE_OUTPUT"

                    FAILURE_REASONS="" # Initialize an empty string to collect reasons

                    if echo "$MERGE_OUTPUT" | grep -q "required status checks"; then
                      FAILURE_REASONS+="* Required status checks are not passing."$'\n'
                    fi
                    if echo "$MERGE_OUTPUT" | grep -q "required reviews"; then
                      FAILURE_REASONS+="* Required pull request reviews are missing."$'\n'
                    fi
                    if echo "$MERGE_OUTPUT" | grep -q "behind main"; then # Updated from 'master' to 'main'
                      FAILURE_REASONS+="* The branch is out of date with the base branch (main)."$'\n'
                    fi
                    if echo "$MERGE_OUTPUT" | grep -q "conflicts"; then
                      FAILURE_REASONS+="* There are merge conflicts."$'\n'
                    fi
                    if echo "$MERGE_OUTPUT" | grep -q "draft"; then
                      FAILURE_REASONS+="* The pull request is a draft and cannot be merged."$'\n'
                    fi
                    # Add more specific checks if you encounter other common error messages
                    # Example: if echo "$MERGE_OUTPUT" | grep -q "linear history"; then
                    #   FAILURE_REASONS+="* Linear history is required but not met."$'\n'
                    # fi

                    # If no specific reason was found, provide a generic message
                    if [ -z "$FAILURE_REASONS" ]; then
                      FAILURE_REASONS="* An unknown branch protection rule or other issue prevented the merge. Please refer to the full error output below for more details."$'\n'
                      FAILURE_REASONS+="```\n$MERGE_OUTPUT\n```"$'\n' # Include full output for unknown errors
                    fi
                    
                    # Comment on the PR
                    COMMENT_BODY=$(cat <<EOF
                    Hi there,

                    Unfortunately, the automated merge for this Pull Request (#$pr_number) failed for the following reason(s):
                    
                    $FAILURE_REASONS
                    
                    Please check the branch protection rules for \`main\` and ensure all requirements are met.

                    _This comment was automatically generated._
EOF
                    )
                    gh pr comment "$pr_number" --body "$COMMENT_BODY"
                    echo "Commented on PR #$pr_number about the merge failure."
                  fi
              else
                  echo "PR #$pr_number is not eligible for merge based on date check."
              fi
          done

          if [ ${#MERGED_PRS[@]} -gt 0 ]; then
            echo "Successfully merged the following PRs: ${MERGED_PRS[*]}"
          else
            echo "No eligible PRs were merged in this run."
          fi
          
          echo "merged_prs=${MERGED_PRS[*]}" >> $GITHUB_OUTPUT